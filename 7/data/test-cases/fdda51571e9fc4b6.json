{"uid":"fdda51571e9fc4b6","name":"test_specific_bar_by_uri[ymapsbm1://org?oid=1234567890-\\u0428\\u0432\\u0430\\u0440\\u0446\\u043a\\u0430\\u0439\\u0437\\u0435\\u0440]","fullName":"TestScenario#test_specific_bar_by_uri","historyId":"e9830ac3e229d79923b7c3aec76e1555","time":{"start":1725105432613,"stop":1725105433271,"duration":658},"status":"failed","statusMessage":"AssertionError: Бар с названием 'Шварцкайзер' не найден в ответе\nassert False","statusTrace":"geocode_base_url = 'https://geocode-maps.yandex.ru/1.x/?apikey=2fd5c994-1d9a-4c12-b654-bb859a04d497'\nheaders = {}, uri = 'ymapsbm1://org?oid=1234567890'\nexpected_bar_name = 'Шварцкайзер'\n\n    @pytest.mark.parametrize(\"uri, expected_bar_name\", [\n        (\"ymapsbm1://org?oid=225375811717\", \"Гамбринус\"),\n        (\"ymapsbm1://org?oid=1234567890\", \"Шварцкайзер\"),\n        (\"ymapsbm1://org?oid=9876543210\", \"Золотая вобла\"),\n    ])\n    def test_specific_bar_by_uri(geocode_base_url, headers, uri, expected_bar_name):\n        url = f\"{geocode_base_url}&uri={uri}&format=json\"\n        response = requests.get(url, headers=headers)\n        assert response.status_code ==200\n        print(response.text)\n    \n    # Проверка, что в ответе есть бар с нужным названием\n        data = response.json()\n        found = False\n        for feature in data.get('response', {}).get('GeoObjectCollection', {}).get('featureMember', []):\n            if expected_bar_name in feature.get('GeoObject', {}).get('name', ''):\n                found = True\n                break\n>       assert found, f\"Бар с названием '{expected_bar_name}' не найден в ответе\"\nE       AssertionError: Бар с названием 'Шварцкайзер' не найден в ответе\nE       assert False\n\nTestScenario.py:48: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"geocode_base_url","time":{"start":1725105432613,"stop":1725105432613,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"headers","time":{"start":1725105432613,"stop":1725105432613,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Бар с названием 'Шварцкайзер' не найден в ответе\nassert False","statusTrace":"geocode_base_url = 'https://geocode-maps.yandex.ru/1.x/?apikey=2fd5c994-1d9a-4c12-b654-bb859a04d497'\nheaders = {}, uri = 'ymapsbm1://org?oid=1234567890'\nexpected_bar_name = 'Шварцкайзер'\n\n    @pytest.mark.parametrize(\"uri, expected_bar_name\", [\n        (\"ymapsbm1://org?oid=225375811717\", \"Гамбринус\"),\n        (\"ymapsbm1://org?oid=1234567890\", \"Шварцкайзер\"),\n        (\"ymapsbm1://org?oid=9876543210\", \"Золотая вобла\"),\n    ])\n    def test_specific_bar_by_uri(geocode_base_url, headers, uri, expected_bar_name):\n        url = f\"{geocode_base_url}&uri={uri}&format=json\"\n        response = requests.get(url, headers=headers)\n        assert response.status_code ==200\n        print(response.text)\n    \n    # Проверка, что в ответе есть бар с нужным названием\n        data = response.json()\n        found = False\n        for feature in data.get('response', {}).get('GeoObjectCollection', {}).get('featureMember', []):\n            if expected_bar_name in feature.get('GeoObject', {}).get('name', ''):\n                found = True\n                break\n>       assert found, f\"Бар с названием '{expected_bar_name}' не найден в ответе\"\nE       AssertionError: Бар с названием 'Шварцкайзер' не найден в ответе\nE       assert False\n\nTestScenario.py:48: AssertionError","steps":[],"attachments":[{"uid":"a4cd7af8a942242b","name":"stdout","source":"a4cd7af8a942242b.txt","type":"text/plain","size":120}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"suite","value":"TestScenario"},{"name":"host","value":"fv-az1766-590"},{"name":"thread","value":"2092-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestScenario"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_bar_name","value":"'Шварцкайзер'"},{"name":"uri","value":"'ymapsbm1://org?oid=1234567890'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"fdda51571e9fc4b6.json","parameterValues":["'Шварцкайзер'","'ymapsbm1://org?oid=1234567890'"]}